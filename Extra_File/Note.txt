Test - 4
// cypress - spec in js and cypress any .js file called as spec file/ Test file both are same.

describe('My Fourth Test Suite', function() {          // describe - is the test suite and it contains test case 
it('My Fourth test case', function() {

    // Alerts - cypress auto accept alert and pop up
    cy.visit("https://rahulshettyacademy.com/AutomationPractice/");

    cy.get('#alertbtn').click();
    cy.get('#confirmbtn').click();

    //window:alert -  cypress also have the capability to listen to brower event and window:alert is the event which get fired on alert open, you are firing the event through cypress to get access to the alert
    cy.on('window:alert', (str) => {   //Fires when your app calls the global window.alert() method. Cypress will auto accept alerts. You cannot change this behavior.
        //mocha to compare two string
        expect(str).to.equal('Hello , share this practice page and share your knowledge');

    });    
    cy.on('window:confirm', (str) => {   //Fires when your app calls the global window.confirm() method. Cypress will auto accept confirmations. Return false from this event and the confirmation will be canceled.
        //mocha to compare two string
        expect(str).to.equal('Hello , Are you sure you want to confirm?');
    });    
   

    });   

    //     it('The second test inside fourth', function() {
    //         //handle multiple tab
    //     cy.visit("https://rahulshettyacademy.com/AutomationPractice/");
    //     cy.get('#opentab').invoke('removeAttr', 'target').click(); // because target open new tab so remove the target attribute then click so it's won't open new tab.
    //     //cy.get('#opentab').click();
    //     cy.origin("https://www.qaclickacademy.com", () => { // after click on the new tab it'll open new domain so first moved into new domain then do your work
    //     cy.get('.nav-item a[href*="about"]').click();
    //     cy.get('.section-title.mt-50 h2').should('contain','Welcome to QAClick Academy');

    //     }); 
    //     });
    
    // it('The Third test inside fourth', function() {
    //     cy.visit("https://rahulshettyacademy.com/AutomationPractice/");
    //     //Handle web tables
    //     cy.get('#product tr td:nth-child(2)').each(($el,index,$list) => {

    //         const text = $el.text();
    //         if(text.includes('simple Python Language'))
    //         {
    //             cy.get('#product tr td:nth-child(2)').eq(index).next().then (function(price)  {   //  Get the immediately following sibling of each DOM element within a set of DOM elements.
    //                 const priceText = price.text();
    //                 expect(priceText).to.equal('25');
    //             });
 
    //         }
    //     });

    // });


    it('The Fourth Mouse hover test inside fourth', function() {
        cy.visit("https://rahulshettyacademy.com/AutomationPractice/");
      /*   Handle web mouse hover - there is no direct mouse hover is support in cypress so we can handle it via jQuery functions
        mouse hover event are not supported in cypress alternatively use jquery or force click */
        //cy.get('div.mouse-hover-content').invoke('show');
        cy.contains('Top').click({force : true}); // if there is any hidden element then we can force it to true then click.
        cy.url().should('include','top');

    });


  
});

 
 
 
 Test - 5
 import 'cypress-iframe';
//<reference types ="cypress-iframe" />

describe('My Fifth Test Suite', function() {          // describe - is the test suite and it contains test case 
it('My Fifth test case To handle iframe', function() {

    // Iframe - To work on iframe first install the iframe using npm command  (npm install -D cypress-iframe )
    cy.visit("https://rahulshettyacademy.com/AutomationPractice/");
    cy.frameLoaded('#courses-iframe');  // load that frame and give the knowledge to the object 
    cy.iframe().find('ul.navigation.clearfix>li:nth-child(5)>a').eq(0).click() // and always use cy.iframe at starting when work on frame
    cy.wait(2000);
    cy.iframe().find('h1[class*="pricing-title"]').should('have.length',2);


    //cy.get('input[value="radio1"]').click();
 

});
  
});

 
 
 Test - 6
 describe('My Fifth Test Suite', function() {   
   before(() => {
        // runs once before all tests in the block
        cy.fixture('example').then(function(data) {   // in the data onject whole exampl.json is stored
                this.data = data;   // data variable can't access outsite this function so create a global variable using this
        });
   }); 
    
it('data drive from fixture', function() {
    cy.visit("https://rahulshettyacademy.com/angularpractice/");
    cy.get('div[class="form-group"]:nth-child(1)>input').type(this.data.name);
    cy.get('#exampleFormControlSelect1').select(this.data.gender);
    cy.get('h4 input[type="text"]').should('have.value', this.data.name);
    cy.get('div[class="form-group"]:nth-child(1)>input').should('have.attr','minlength',2);
    cy.get('#inlineRadio3').should('be.disabled');
    //cy.pause(); // pause the exucution and we can debug.
    cy.get('a[href$="shop"]').click();
    //cy.selectProduct('Blackberry');
    //cy.selectProduct('Nokia');
    //cy.selectProduct(this.data.productName);
    this.data.productName.forEach(function(element) {  // run multiple time based on the index present in the productName array in example.json file
        cy.selectProduct(element);
    });

});
  
});

 
 
 TestFrameWork
 
 import  HomePage from '../pageObjects/HomePage';
import ProductsPage from '../pageObjects/ProductsPage';
import CheckOutPage from '../pageObjects/CheckOutPage';
import PurchasePage from '../pageObjects/PurchasePage';
describe('My Fifth Test Suite', function() {   
   before(() => {
        // runs once before all tests in the block
        cy.fixture('example').then(function(data) {   // in the data onject whole exampl.json is stored
                this.data = data;   // data variable can't access outsite this function so create a global variable using this
        });
   }); 
    
it('data drive from fixture', function() {
   const homePage = new HomePage();
   const productPage = new ProductsPage();
   const checkOutPage = new CheckOutPage();
   const purchasePage = new PurchasePage();
   
    cy.visit(Cypress.env('url'));   // access the url via global variable
    homePage.getNameBox().type(this.data.name);
    homePage.getGender().select(this.data.gender);
    homePage.twoWayDatabindingTextBox().should('have.value', this.data.name);
    homePage.checkLengthOfTheTextBox().should('have.attr','minlength',2);
    homePage.entrepreneurRadioButton().should('be.disabled');
    homePage.shopTab().click();
    this.data.productName.forEach(function(element) {  // run multiple time based on the index present in the productName array in example.json file
        cy.selectProduct(element);
    });
    
    productPage.checkOutButton().click();
    checkOutPage.verifyThePrice();
    checkOutPage.checkOutButton().click();
    purchasePage.deliveryCountryBox().type('India');
   // Cypress.config('defaultCommandTimeout', 6000);  // like this also we can set wait and it'll only applicable for this specs steps
    purchasePage.selectIndiaasCountry().click();
    purchasePage.purchaseCheckBox().click({force:true});
    purchasePage.purchaseButton().click();
    purchasePage.verifySuccessMessage();
});
  
});



HomePage-  


class HomePage {

   getNameBox() {
        return cy.get('div[class="form-group"]:nth-child(1)>input');
    }
    getGender(){
       return  cy.get('#exampleFormControlSelect1');
    }
   
    twoWayDatabindingTextBox(){
        return cy.get('h4 input[type="text"]');
    }

    entrepreneurRadioButton() {
        return cy.get('#inlineRadio3');
    }

    checkLengthOfTheTextBox()
    {
        return cy.get('div[class="form-group"]:nth-child(1)>input');
    }

    shopTab(){
        return cy.get('a[href$="shop"]');
    }
}

export default HomePage;



CheckOutPage -  

class CheckOutPage {

    verifyThePrice(){
        let sum =0;
        cy.get('tr td:nth-child(4)>strong').each(($el,indexe,$list) =>{
           let amount = $el.text();
           let result = amount.split(" ")
           result = result[1].trim();
           sum = Number(sum) + Number(result);
           cy.log(result);
          
        }).then(function() {
            cy.log(sum);
        });

        cy.get('td.text-right>h3>strong').then(function(element){
            let amount = element.text();
            let total = amount.split(" ")
            total = total[1].trim();
            expect(sum).to.equal(Number(total));
        });
    }

    checkOutButton(){
       return cy.get('button.btn.btn-success');
    }
 
}
export default CheckOutPage;


ProductsPage - 

class ProductsPage {

    checkOutButton(){
       return cy.get('a.nav-link.btn.btn-primary');
    }
 
}

export default ProductsPage;

PurchasePage -


class PurchasePage {

    deliveryCountryBox(){
       return cy.get('#country');
    }

    selectIndiaasCountry(){
        
         return cy.get('div.suggestions> ul>li>a');
    }

    purchaseCheckBox(){
        return cy.get('#checkbox2') ;
    }

    purchaseButton(){
        return cy.get('input[value="Purchase"]');
    }

    verifySuccessMessage(){
       // cy.get('div.alert.alert-success.alert-dismissible').should('have.text', 'Success! Thank you! Your order will be delivered in next few weeks :-).')
       cy.get('div.alert.alert-success.alert-dismissible').then(function(element) {
            const actualTest = element.text();
            expect(actualTest.includes('Success')).to.be.true;
       });
    }
 
}

export default PurchasePage;
 
 
 
 
 
 
 
 
 
 
 
 /// <reference types="Cypress" />
const selectors = {

    input : {
        serachField : "#twotabsearchtextbox",
    },
    label : {
        userName : "span#nav-link-accountList-nav-line-1",
        accountList : 'a[data-csa-c-slot-id="nav-link-accountList"]>span',
    }
}
class HomePage{

    enterDataInSearchField(enterData){
    cy.get(selectors.input.serachField).type(enterData).type('{enter}');
        

    }
    verifyTheUserNameInTheHomePage(userIdName){
        cy.get(selectors.label.userName).should('have.text',userIdName);
    }

    clickOnTheAccountAndListOption(){
        cy.get(selectors.label.accountList).click();
    }
}

export default HomePage;


const selectors = {
    input : {
        emailTextBox : "#ap_email",
        passWordTestBox : "#ap_password", 
    },
    button : {
        contunueButton : "#continue",
        signInButton  : "#signInSubmit",
    },

}
class SignInPage{

    enterEMailInToEMailTextBox(email){
        cy.get(selectors.input.emailTextBox).type(email);
    }

    enterPasswordInToPasswordTextBox(password){
        cy.get(selectors.input.passWordTestBox).type(password);
    }
    clickOnContinueButton(){
        cy.get(selectors.button.contunueButton).click();
    }
    clickOnSignInButton(){
        cy.get(selectors.button.signInButton).click();
    }
 

}

export default SignInPage;



   expect(price).to.be.gte(minimumAmount); // Greater than or equal to minPrice
            expect(price).to.be.lte(maximumAmount); // Less than or equal to maxPrice


example.json			
 "emailId" : "dasarindam469@gmail.com",
    "password" : "Arindam@123",
    "userIdName" : "Hello, Arindam"   
	
	
	Cypress.Commands.add('isProductAvailable', (productName) => {
  // Use the CSS selector to check for the product name
  return cy.get('h2.a-size-base a')
    .contains(productName)
    .should('exist')
    .then(() => {
      return true; // Product is available
    })
    .catch(() => {
      return false; // Product is not available
    });
});


it('Check if a product is available', () => {
  const productName = 'Apple iPhone 15 (128 GB) - Blue';

  cy.isProductAvailable(productName).then((isAvailable) => {
    if (isAvailable) {
      cy.log(`The product "${productName}" is available.`);
    } else {
      cy.log(`The product "${productName}" is not available.`);
    }
  });
});


testData.json
{
    "searchProductType" : "Mobile",
    "minimumAmount" : 10000,
    "maximumAmount" : 20000,
    "emailId" : "dasarindam469@gmail.com",
    "password" : "Arindam@123",
    "userIdName" : "Hello, Arindam",
    "cartSuccessMessage" : "Added to Cart",
    "deliveryAddressMessage" : "Select a delivery address",
    "cartDeleteSuccessMessage" : "Your Amazon Cart is empty.",
    "signInText" : "Sign in",
    "fullName" : "Arinda Das",
    "MobileNumber" : "7004853695",
    "pinCode" : 832108,
    "address1" : "H.no -59 Bara Gamharia near Gopal Mandir Gali, Jamshedpur",
    "address2" : "Bara Gamharia",
    "landMark" : "Lalbuilding",
    "addressMessageAddedSuccessfully" : "Address saved"

}

TC-02
     productListPage.clickOnAddToCartIconOption();
        productListPage.clickOnTheDeleteOptionFromCart();
        productListPage.verifyTheSuccessfullCartDeleteMessage(data.cartDeleteSuccessMessage);
        homePage.clickOnTheAllHamBurgerOptionInHomePage();
        homePage.clickOnTheSignOutOption();
        signInPage.verifyTheSignInOption(data.signInText);


TC-03

import AddressPage from "../pageObjects/AddressPage";
import HomePage from "../pageObjects/HomePage";
import SignInPage from "../pageObjects/SignInPage";

describe('Add Adress', () => {

    let data;
    before(() => {
        cy.visit('/');
        cy.fixture('TestData').then((fixtureData) => {
            data = fixtureData;
        });
    });
    const signInPage = new SignInPage();
    const homePage = new HomePage();
    const addressPage = new AddressPage();

    it('Add address for user', () => {
        homePage.clickOnTheAccountAndListOption();
        signInPage.enterEMailInToEMailTextBox(data.emailId);
        signInPage.clickOnContinueButton();
        signInPage.enterPasswordInToPasswordTextBox(data.password);
        signInPage.clickOnSignInButton();
        homePage.verifyTheUserNameInTheHomePage(data.userIdName);
        homePage.clickOnTheAllHamBurgerOptionInHomePage();
        homePage.clickOnYourAccountOption();
        addressPage.clickOnYourAddressOption();
        addressPage.clickOnAddAddressOption();
        addressPage.enterFullNameInAddress(data.fullName);
        addressPage.enterMobileNumberInAddress(data.MobileNumber);
        addressPage.enterPinCodeInAddress(data.pinCode);
        addressPage.enterFirstAddress(data.address1);
        addressPage.enterSecondAddress(data.address2);
        addressPage.enterLandMarkInAddress(data.landMark);
        addressPage.clickOnDefaultAddressCheckBox();
        addressPage.clickOnSubmitAddressButton();
        addressPage.verifyTheSuccessFullAddressAddedMessage(data.addressMessageAddedSuccessfully);
        homePage.clickOnTheAccountAndListOption();
        addressPage.verifyPinCodeAfterSubmitAddress(data.pinCode);
    });
});

TestData.json
{
    "searchProductType" : "Mobile",
    "minimumAmount" : 10000,
    "maximumAmount" : 20000,
    "emailId" : "dasarindam469@gmail.com",
    "password" : "Arindam@123",
    "userIdName" : "Hello, Arindam",
    "cartSuccessMessage" : "Added to Cart",
    "deliveryAddressMessage" : "Select a delivery address",
    "cartDeleteSuccessMessage" : "Your Amazon Cart is empty.",
    "signInText" : "Sign in",
    "fullName" : "Arinda Das",
    "MobileNumber" : "7004853695",
    "pinCode" : 832108,
    "address1" : "H.no -59 Bara Gamharia near Gopal Mandir Gali, Jamshedpur",
    "address2" : "Bara Gamharia",
    "landMark" : "Lalbuilding",
    "addressMessageAddedSuccessfully" : "Address saved",
    "wishListProduct" : "Apple iPhone 15",
    "wishListDeletedMessage" : "Deleted",
    "noProductFoundMessage" : "No Prodct Found",
    "blankUserIDErrorMessage" : "Enter your email or mobile phone number",
    "withOutAtTheRateErrorMessage" : "We cannot find an account with that email address",
    "wrongUserIDErrorMessage" : "We cannot find an account with that email address",
    "withOutAtTheRateUserId" : "dasarindam469gmail.com",
    "wrongUserID" : "dasarindamdas@469@gmail.com",
    "blankPasswordErrorMessage": "Enter your password",
    "wrong_Password_ErrorMessage" : "Your password is incorrect",
    "wrongPassword" : "Arindam@1234"
}





    // it('POST Request',()=>{
    //     cy.request({
    //         method : 'POST',
    //         url : 'https://reqres.in/api/users?page=2',
    //         body : {
                
    //                 name: "Arindam",
    //                 job: "SDET"
                
    //         }
    //     }).its('status').should('equal',201);
    // })


 I am well-versed in using Cypress, a popular and modern end-to-end testing framework, to create efficient and reliable test scripts.
 My proficiency in Cypress allows me to automate tests for web applications with ease.
 
  I am well-versed in using Cypress, a popular and modern end-to-end testing framework, to create efficient and reliable test scripts.
 My proficiency in Cypress allows me to automate tests for web applications with ease.
 
 Cypress Automation: I have a solid grasp of Cypress and have used it extensively for writing test cases, performing cross-browser testing, 
 and ensuring the functionality, stability, and performance of web applications.